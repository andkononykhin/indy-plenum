#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import argparse

import asyncio
import concurrent.futures

from stp_core.common.log import getlogger
from plenum.common.config_util import getConfig
from plenum.config import STATS_SERVER_PORT, STATS_SERVER_IP

logger = getlogger()
config = getConfig()

clients = {}  # task -> (reader, writer)


async def handle_client(client_reader, client_writer):
    # give client a chance to respond, timeout after 10 seconds
    while True:
        try:
            data = await client_reader.readline()
        except concurrent.futures.CancelledError:
            logger.warning("task has been cancelled")
            return
        except Exception as e:
            logger.exception("failed to readline")
            return
        else:
            if data is None:
                logger.warning("Expected data, received None")
                return
            elif not data:
                logger.warning("EOF received, closing connection")
                return

        logger.debug("Received data: {}".format(data))


def accept_client(client_reader, client_writer):
    logger.info("New Connection")
    task = asyncio.Task(handle_client(client_reader, client_writer))

    clients[task] = (client_reader, client_writer)

    def client_done(task):
        del clients[task]
        client_writer.close()
        logger.info("End Connection")

    task.add_done_callback(client_done)


def main():

    def check_unsigned(s):
        res = None
        try:
            res = int(s)
        except ValueError:
            pass
        if res is None or res <= 0:
            raise argparse.ArgumentTypeError(("{!r} is incorrect, "
                                              "should be int > 0").format(s,))
        else:
            return res

    parser = argparse.ArgumentParser(
        description=(
            "Tool to explore and gather statistics about running validator"
        ),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Verbose mode (command line)")
    parser.add_argument("--json", action="store_true",
                        help="Format output as JSON (ignores -v")

    parser.add_argument(
        "-i", "--ip", metavar="IP", default=STATS_SERVER_IP,
        help="Server IP"
    )
    parser.add_argument(
        "-p", "--port", metavar="PORT", default=STATS_SERVER_PORT,
        type=check_unsigned, help="Server port"
    )

    args = parser.parse_args()

    logger.debug("Cmd line arguments: {}".format(args))
    logger.info("Starting server on {}:{} ...".format(args.ip, args.port))

    loop = asyncio.get_event_loop()
    coro = asyncio.start_server(accept_client, args.ip, args.port, loop=loop)
    server = loop.run_until_complete(coro)

    # Serve requests until Ctrl+C is pressed
    print('Serving on {} ...'.format(server.sockets[0].getsockname()))
    logger.info("Serving on {}:{} ...".format(args.ip, args.port))
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass

    logger.info("Stopping server ...")

    # Close the server
    server.close()
    for task in clients.keys():
        task.cancel()
    loop.run_until_complete(server.wait_closed())
    loop.close()
    logger.info("Done")


if __name__ == "__main__":
    sys.exit(main())
